# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Continuous integration

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    defaults:
      run:
        working-directory: ./scripts
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Look for TODO comments
      shell: bash
      run: |
        pattern='^+.*TODO'
        if git --no-pager diff "origin/main..HEAD" | grep "${pattern}"; then
          echo "There are one or more TODO comments left on this branch!" >&2
          exit 142
        fi
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -r ./setup/requirements.txt 2> ./stderr.txt
        e="$(cat ./stderr.txt)"
        if [[ "$e" != "" ]]; then
          echo "There was output via stderr:"
          echo "$e"
          exit 143
        fi
    # Type check before installing dev dependencies in case there's a
    # dependency that's in requirements-dev.txt that should be in
    # requirements.txt.
    # Skip type-checking the tests since those may need dev dependencies.
    - name: Type check
      shell: bash
      run: |
        mv ./test/ ../test/
        pyright_version="$(grep --extended-regexp '^pyright\b' ./setup/requirements-dev.txt)"
        pip install "${pyright_version}" 2> ./stderr.txt
        e="$(cat ./stderr.txt)"
        if [[ "$e" != "" ]]; then
          echo "There was output via stderr:"
          echo "$e"
          exit 143
        fi
        pyright . --warnings --level warning
        mv ../test/ ./test/
    - name: Install dev dependencies
      shell: bash
      run: |
        pip install -r ./setup/requirements-dev.txt 2> ./stderr.txt
        e="$(cat ./stderr.txt)"
        if [[ "$e" != "" ]]; then
          echo "There was output via stderr:"
          echo "$e"
          exit 143
        fi
    - name: Type check tests
      run: |
        pyright ./test/ --warnings --level warning
    - name: Check code style
      run: |
        black . --check --verbose
        isort . --check --verbose
    - name: Check that dependency graph is up to date
      run: python -m dependoc check
    # To be able to run Selenium tests
    - name: Install Firefox
      uses: browser-actions/setup-firefox@v1
      with:
        firefox-version: latest
    - name: Run tests
      shell: bash
      run: |
        # Use grep to check that at least one test was run
        python -m unittest discover --top-level-directory . --start-directory ./test/unit --failfast --verbose 2>&1 | tee >(grep --quiet 'Ran [1-9][0-9]* tests')
        # Skip the tests that require credentials or Selenium
        rm ./test/integration/test_boxcast_api.py
        rm ./test/integration/test_download_message_notes.py
        rm ./test/integration/test_planning_center.py
        python -m unittest discover --top-level-directory . --start-directory ./test/integration --failfast --verbose 2>&1 | tee >(grep --quiet 'Ran [1-9][0-9]* tests')
