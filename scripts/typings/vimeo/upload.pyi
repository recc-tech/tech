from typing import Dict, Iterable, Union

class UploadVideoMixin:
    UPLOAD_ENDPOINT: str = ...
    VERSIONS_ENDPOINT: str = ...
    DEFAULT_CHUNK_SIZE: int = ...
    def upload(self, filename: str, **kwargs: object) -> str: ...
    def replace(self, video_uri: str, filename: str, **kwargs: object) -> str: ...
    @staticmethod
    def apply_chunk_size_rules(proposed_chunk_size: int, file_size: int) -> int: ...

class UploadPictureMixin:
    BASE_FIELDS = ...
    def upload_picture(
        self,
        obj: Union[str, Dict[str, object]],
        filename: str,
        activate: bool,
        fields: Union[None, str, Iterable[str]],
    ) -> Dict[str, object]: ...

class UploadTexttrackMixin:
    TEXTTRACK_ENDPOINT = ...
    BASE_FIELDS = ...
    def upload_texttrack(
        self,
        video_uri: str,
        track_type: str,
        language: str,
        filename: str,
        fields: Union[None, str, Iterable[str]],
    ) -> Dict[str, object]: ...

class UploadMixin(UploadVideoMixin, UploadPictureMixin, UploadTexttrackMixin): ...
